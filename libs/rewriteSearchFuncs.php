<?php

require( __DIR__ . '/../vendor/autoload.php' );
require( __DIR__ . '/../libs/CoderSiteFuncs.php' );

function retrieveSearchHashes( $dbname ){

	$config = parse_ini_file( 'config.ini' );
	$servername = $config['servername'];
	$username = $config['username'];
	$password = $config['password'];

	$today = date("Y-m-d") . "T" . date("H:i:s") . "000Z";


	$serverConnection = mysqli_connect( $servername, $username, $password, $dbname );
	if (mysqli_connect_errno()) {
	  echo "Failed to connect to MySQL: " . mysqli_connect_error();
	}

	$sql = "SELECT `id`, `name`, `value`, `created_at`, `updated_at` FROM `settings` WHERE `name`= 'search hash'";
	$result = $serverConnection->query( $sql );

	if (!mysqli_query($serverConnection,$sql)) {
	  die('Error: ' . mysqli_error($serverConnection));
	}
	
	mysqli_close($serverConnection);

	$hashes = [];

	while( $row = mysqli_fetch_assoc($result) ){
			array_push( $hashes, $row['value'] );
	}

	return $hashes;
}

function retrieveTranscriptList( $hash_list ){

	$total_hits = [];
	foreach( $hash_list as $hash ){

		$limit = 50;
		$offset = 0;

		$transcript_ids = [];

		$search_results_json = runCurlSearch( $hash, $limit, $offset);
		$search_array = (array)$search_results_json->results->hits->hits;
		print( "total hits for this query: " . $search_results_json->results->hits->total . "\n" );
		foreach( $search_array as $hit ){
			array_push( $transcript_ids, $hit->_id );
		}
		while( sizeof($transcript_ids) < $search_results_json->results->hits->total ){
			$offset = $offset + 50;
			$search_results_json = runCurlSearch( $hash, $limit, $offset);
			$search_array = (array)$search_results_json->results->hits->hits;
			
			foreach( $search_array as $hit ){
				array_push( $transcript_ids, $hit->_id );
			}
			print( "queries added so far: " . sizeof($transcript_ids) . "\n" );
		}
		array_push( $total_hits, $transcript_ids );
	}

	return $total_hits;
}

function retrieveIndividualTranscript( $transcript_id ){

	$config = parse_ini_file( 'config.ini' );
	$url = $config['endpointURL'];
	$sess_id = $config['sess_id'];

	// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
	$ch = curl_init();

	curl_setopt($ch, CURLOPT_URL, $url . $transcript_id);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");


	$headers = array();
	$headers[] = "Host: 10.163.73.9";
	$headers[] = "Accept: application/json, text/javascript, */*; q=0.01";
	$headers[] = "Accept-Language: en-US,en;q=0.5";
	$headers[] = "X-Requested-With: XMLHttpRequest";
	$headers[] = "Referer: http://10.163.73.9/";
	$headers[] = "Cookie: PHPSESSID=" . $sess_id;
	$headers[] = "Connection: keep-alive";
	curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

	$result = curl_exec($ch);
	if (curl_errno($ch)) {
	    echo 'Error:' . curl_error($ch);
	}
	curl_close ($ch);


	$result_json_object = json_decode( $result );
	
	/* 	object has shape of:
		
		transcript
			id
			trans_id
			channel
			broadcast
			channel_broadcast
			datetime
			city
			stat
			created_at
			updated_at
			contents
				number
				text
				startTime
				stopTime 
			has_video
			has_schedule
			video_location
			show
			previous_transcript_id
			next_transcript_id 			*/
	
	return $result_json_object;
}

function consolidateIDList( $transcript_ids ){

	$newlist = [];

	foreach( $transcript_ids as $idlist ){

		foreach( $idlist as $id ){
			array_push( $newlist, $id );
		}
	}
	
	return $newlist;
}

function retrieveAllTranscripts( $transcript_ids ){

	$transcripts = [];

	foreach( $transcript_ids as $id ){
		print( "retrieving " . $id ."... ");
		array_push( $transcripts, retrieveIndividualTranscript($id) );
		print( "done." . PHP_EOL );
	}
	
	return $transcripts;
}

function addTranscripts( $transcripts, $dbname ){

	$config = parse_ini_file( 'config.ini' );
	$servername = $config['servername'];
	$username = $config['username'];
	$password = $config['password'];

	$serverConnection = mysqli_connect( $servername, $username, $password, $dbname );
	if (mysqli_connect_errno()) {
	  echo "Failed to connect to MySQL: " .mysqli_connect_error();
	}
}

function refreshNew2( $dbname ){

	$blue 	= "\033[34m";
	$green 	= "\033[32m";
	$Cyan 	="\033[36m";
	$Red 	= "\033[31m";
	$Purple = "\033[35m";
	$Brown 	= "\033[33m";
	$lCyan 	= "\033[36m";
	$Yellow = "\033[33m";
	$off 	= "\033[0m";

	$num_before = numTranscripts( $dbname );

	$search_hashes = retrieveSearchHashes( $dbname ); // get the search associated with the site
	print_r( $search_hashes );

	$total_hits = retrieveTranscriptList( $search_hashes );
	$total_hits = consolidateIDList( $total_hits );

	$transcripts = retrieveAllTranscripts( $total_hits );
	$transcript_chunks = [];

	if( sizeof($transcripts) > 999 ){
		$transcript_chunks = array_chunk( $transcripts, 999 );
	}
	else
		array_push( $transcript_chunks, $transcripts );

	foreach( $transcript_chunks as $transcript_chunk )
		massAdd( $dbname, $transcript_chunk );

	$num_after = numTranscripts( $dbname ); 
	if( $num_after > $num_before ){ 		// if we actually added transcripts, we need to alert coders via email

		$num_added = $num_after - $num_before;
		$emails = retrieveEmails( $dbname );
		foreach( $emails as $email ){

			if( $num_added > 1 ){
				$subject = $num_added.' new hits were added to '.$dbname.'.';
			}
			elseif( $num_added == 1 ){
				$subject = $num_added.' new hit was added to the '.explode('_',$dbname)[1].' study site';
			}	
			$message = '<b>'.date('l jS \of F Y h:i:s A').'</b>';
			$message .="<br>Hello. <br>Based on your stored search criteria, COMMTV has identified "; 
						if( $num_added > 1){
							$message .= $num_added;
						}
						elseif( $num_added == 1 ){
							$message .= $num_added;
						}

						$message .= " new results, added them 
						to the '".explode('_',$dbname)[1]."' study, and made them avaliable for coding in your To Do List.";
						
			if( $email[0] != '' ){
				mailOut( $email, $subject, $message );
			}
		}
	}

}

?>